using System.Collections.Generic;
using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Data.ResponseModel;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using MS_GIS_SOLUTION.Core;
using MS_GIS_SOLUTION.Entities;
using MS_GIS_SOLUTION.WEB.Models.ViewModels;
using System.Linq;
using System.Threading.Tasks;
using MS_GIS_SOLUTION.WEB.Models;
using MS_GIS_SOLUTION.WEB.Models.FilterVM;

namespace MS_GIS_SOLUTION.WEB.Controllers
{
    public class ExploitationRoadsController : BaseController
    {
        public ExploitationRoadsController(MsGisDbContext db) : base(db)
        {
            PageTitle = "İstismar yolları";
        }

        public IActionResult CreateEdit(int? id, bool mode = false)
        {
            Obj12ExploitationRoadsViewModel model = new Obj12ExploitationRoadsViewModel();

            if (id > 0)
            {
                Obj12ExploitationRoad exploitationRoad = _db.Asqueryable<Obj12ExploitationRoad>().FirstOrDefault(x => x.IdExploitationRoads == id);
                model.Name = exploitationRoad.Name;
                model.Objectid = exploitationRoad.Objectid;
                model.Length = exploitationRoad.Length;
                model.IdExploitationRoads = exploitationRoad.IdExploitationRoads;
                model.RoadWidth = exploitationRoad.RoadWidth;
                model.FkIdAdminUnit = exploitationRoad.FkIdAdminUnit;
                model.FkIdActivityStatus = exploitationRoad.FkIdActivityStatus;
                model.FkIdOwnershipType = exploitationRoad.FkIdOwnershipType;
                model.RoadCover = exploitationRoad.RoadCover;
                model.FkIdOwner = exploitationRoad.FkIdOwner;
                model.ExploitationDate = exploitationRoad.ExploitationDate;
                model.Description = exploitationRoad.Description;
                model.Mode = mode;
                model.ButtonPanel = new ButtonPanelViewModel { Add = true, Update = true, Delete = true, View = true, ShowMap = true, ReadOnly = mode };
            }

            return View(model);
        }

        public virtual LoadResult Load(DataSourceLoadOptions loadOptions)
        {
            return DataSourceLoader.Load(_db.Asqueryable<Obj12ExploitationRoad>().Select(x => new
            {
                x.IdExploitationRoads,
                x.Description,
                x.Length,
                x.RoadWidth,
                x.Objectid,
                x.ExploitationDate,
                x.RoadCover,
                x.FkIdActivityStatus,
                x.FkIdAdminUnit,
                x.FkIdOwner,
                x.FkIdOwnershipType,
                x.Name,
            }), loadOptions);
        }

        [HttpDelete]
        public virtual IActionResult Delete(int key)
        {
            bool result = true;
            _db.DeleteById<Obj12ExploitationRoad>(key);
            result = _db.SaveChanges() > 0;

            if (result)
                return Ok();
            else
                return BadRequest("Əməliyyat zamanı xəta baş verdi!");
        }

        [HttpPost]

        public IActionResult Save(Obj12ExploitationRoadsViewModel model)
        {
            Obj12ExploitationRoad exploitationRoad = _db.Asqueryable<Obj12ExploitationRoad>().FirstOrDefault(x => x.IdExploitationRoads == model.IdExploitationRoads && x.Objectid == model.Objectid) ?? new Obj12ExploitationRoad();

            if (exploitationRoad != null)
            {
                exploitationRoad.Objectid = model.Objectid ?? 0;
                exploitationRoad.IdExploitationRoads = model.IdExploitationRoads;
                exploitationRoad.Name = model.Name;
                exploitationRoad.Length = model.Length;
                exploitationRoad.RoadWidth = model.RoadWidth;
                exploitationRoad.FkIdAdminUnit = model.FkIdAdminUnit;
                exploitationRoad.FkIdActivityStatus = model.FkIdActivityStatus;
                exploitationRoad.FkIdOwnershipType = model.FkIdOwnershipType;
                exploitationRoad.FkIdOwner = model.FkIdOwner;
                exploitationRoad.RoadCover = model.RoadCover;
                exploitationRoad.ExploitationDate = model.ExploitationDate;
                exploitationRoad.Description = model.Description;

                if (model.Objectid > 0)
                {
                    _db.Update(exploitationRoad);
                }

                _db.SaveChanges();
            }

            return RedirectToAction("Index");
        }

        [HttpPost]
        public List<int> Filter(ExploitationRoadFilterModel data)
        {
            var userRegionIds = UserRegions.Select(x => x.Id).ToList();
            return _db.Asqueryable<Obj12ExploitationRoad>()
                .Where(x =>
                userRegionIds.Contains((int)x.FkIdAdminUnit) &&
                    (x.Name.Contains(data.Name) || data.Name == null) &&
                    (data.fk_id_admin_unit == null || data.fk_id_admin_unit.Contains(x.FkIdAdminUnit)) &&
                    (data.FkIdOwner == null || data.FkIdOwner.Contains(x.FkIdOwner)) &&
                    (data.FkIdOwnershipType == null || data.FkIdOwnershipType.Contains(x.FkIdOwnershipType)) &&
                    (data.FkIdActivityStatus == null || data.FkIdActivityStatus.Contains(x.FkIdActivityStatus)) &&
                    (data.RoadCover == null || data.RoadCover.Contains(x.RoadCover)) &&


                    (x.ExploitationDate >= data.ExploitationDateMin || data.ExploitationDateMin == null) &&
                    (x.ExploitationDate <= data.ExploitationDateMax || data.ExploitationDateMax == null) &&

                    (x.Length >= data.LengthMin || data.LengthMin == null) &&
                    (x.Length <= data.LengthMax || data.LengthMax == null) &&

                    (x.RoadWidth >= data.RoadWidthMin || data.RoadWidthMin == null) &&
                    (x.RoadWidth <= data.RoadWidthMax || data.RoadWidthMax == null)

                )
                .Select(x => x.Objectid).Distinct().ToList();
        }

        [HttpPost]
        public Task<LoadResult> LoadFilter(DataSourceLoadOptions loadOptions, string objectIds)
        {
            List<int> ids = new List<int>();
            if (!string.IsNullOrEmpty(objectIds))
            {
                ids = objectIds.Split(",").Select(int.Parse).ToList();
            }
            //
            return DataSourceLoader.LoadAsync(_db.Asqueryable<Obj12ExploitationRoad>().Where(x => (ids.Contains(x.Objectid))).Select(x => new
            {
                x.IdExploitationRoads,
                x.Objectid,
                x.Name,
                x.ExploitationDate,
                x.Controlled,
                x.FkIdActivityStatus,
                x.FkIdAdminUnit,
                x.FkIdOwnershipType,
                RoadCover = x.RoadCover == 1 ? "Örtüklü" : x.RoadCover == 2 ? "Örtüksüz" : null,
                x.FkIdOwner,
                x.Length,
                x.RoadWidth,
                x.Description
            }), loadOptions);
        }

        [HttpPost]
        public object Get(int id)
        {

            return _db.Asqueryable<Obj12ExploitationRoad>().Where(x => x.IdExploitationRoads == id).ToList().Select(x => new
            {
                x.IdExploitationRoads,
                Name = x.Name ?? "məlumat yoxdur",
                Length = x.Length > 0 ? decimal.Round(x.Length ?? 0, 2).ToString() : "məlumat yoxdur",
                AdminUnit = _db.Asqueryable<SAdminUnit>().FirstOrDefault(z => z.IdAdminUnit == (int?)x.FkIdAdminUnit)?.Name ?? "məlumat yoxdur",
                Owner = _db.Asqueryable<SOwner>().FirstOrDefault(z => z.IdOwner == (int?)x.FkIdOwner)?.Name ?? "məlumat yoxdur",
            }).FirstOrDefault();
        }

    }
}
